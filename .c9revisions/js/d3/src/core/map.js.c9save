{"ts":1363083348017,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"d3.map = function(object) {\n  var map = new d3_Map;\n  for (var key in object) map.set(key, object[key]);\n  return map;\n};\n\nfunction d3_Map() {}\n\nd3_class(d3_Map, {\n  has: function(key) {\n    return d3_map_prefix + key in this;\n  },\n  get: function(key) {\n    return this[d3_map_prefix + key];\n  },\n  set: function(key, value) {\n    return this[d3_map_prefix + key] = value;\n  },\n  remove: function(key) {\n    key = d3_map_prefix + key;\n    return key in this && delete this[key];\n  },\n  keys: function() {\n    var keys = [];\n    this.forEach(function(key) { keys.push(key); });\n    return keys;\n  },\n  values: function() {\n    var values = [];\n    this.forEach(function(key, value) { values.push(value); });\n    return values;\n  },\n  entries: function() {\n    var entries = [];\n    this.forEach(function(key, value) { entries.push({key: key, value: value}); });\n    return entries;\n  },\n  forEach: function(f) {\n    for (var key in this) {\n      if (key.charCodeAt(0) === d3_map_prefixCode) {\n        f.call(this, key.substring(1), this[key]);\n      }\n    }\n  }\n});\n\nvar d3_map_prefix = \"\\0\", // prevent collision with built-ins\n    d3_map_prefixCode = d3_map_prefix.charCodeAt(0);\n"]],"start1":0,"start2":0,"length1":0,"length2":1182}]],"length":1182}
