{"ts":1362474634855,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1362474651315,"patch":[[{"diffs":[[1,"// set up SVG for D3\nvar width  = 960,\n    height = 500,\n    colors = d3.scale.category10();\n\nvar svg = d3.select('body')\n  .append('svg')\n  .attr('width', width)\n  .attr('height', height);\n\n// set up initial nodes and links\n//  - nodes are known by 'id', not by index in array.\n//  - reflexive edges are indicated on the node (as a bold black circle).\n//  - links are always source < target; edge directions are set by 'left' and 'right'.\nvar nodes = [\n    {id: 0, reflexive: false},\n    {id: 1, reflexive: true },\n    {id: 2, reflexive: false}\n  ],\n  lastNodeId = 2,\n  links = [\n    {source: nodes[0], target: nodes[1], left: false, right: true },\n    {source: nodes[1], target: nodes[2], left: false, right: true }\n  ];\n\n// init D3 force layout\nvar force = d3.layout.force()\n    .nodes(nodes)\n    .links(links)\n    .size([width, height])\n    .linkDistance(150)\n    .charge(-500)\n    .on('tick', tick)\n\n// define arrow markers for graph links\nsvg.append('svg:defs').append('svg:marker')\n    .attr('id', 'end-arrow')\n    .attr('viewBox', '0 -5 10 10')\n    .attr('refX', 6)\n    .attr('markerWidth', 3)\n    .attr('markerHeight', 3)\n    .attr('orient', 'auto')\n  .append('svg:path')\n    .attr('d', 'M0,-5L10,0L0,5')\n    .attr('fill', '#000');\n\nsvg.append('svg:defs').append('svg:marker')\n    .attr('id', 'start-arrow')\n    .attr('viewBox', '0 -5 10 10')\n    .attr('refX', 4)\n    .attr('markerWidth', 3)\n    .attr('markerHeight', 3)\n    .attr('orient', 'auto')\n  .append('svg:path')\n    .attr('d', 'M10,-5L0,0L10,5')\n    .attr('fill', '#000');\n\n// line displayed when dragging new nodes\nvar drag_line = svg.append('svg:path')\n  .attr('class', 'link dragline hidden')\n  .attr('d', 'M0,0L0,0');\n\n// handles to link and node element groups\nvar path = svg.append('svg:g').selectAll('path'),\n    circle = svg.append('svg:g').selectAll('g');\n\n// mouse event vars\nvar selected_node = null,\n    selected_link = null,\n    mousedown_link = null,\n    mousedown_node = null,\n    mouseup_node = null;\n\nfunction resetMouseVars() {\n  mousedown_node = null;\n  mouseup_node = null;\n  mousedown_link = null;\n}\n\n// update force layout (called automatically each iteration)\nfunction tick() {\n  // draw directed edges with proper padding from node centers\n  path.attr('d', function(d) {\n    var deltaX = d.target.x - d.source.x,\n        deltaY = d.target.y - d.source.y,\n        dist = Math.sqrt(deltaX * deltaX + deltaY * deltaY),\n        normX = deltaX / dist,\n        normY = deltaY / dist,\n        sourcePadding = d.left ? 17 : 12,\n        targetPadding = d.right ? 17 : 12,\n        sourceX = d.source.x + (sourcePadding * normX),\n        sourceY = d.source.y + (sourcePadding * normY),\n        targetX = d.target.x - (targetPadding * normX),\n        targetY = d.target.y - (targetPadding * normY);\n    return 'M' + sourceX + ',' + sourceY + 'L' + targetX + ',' + targetY;\n  });\n\n  circle.attr('transform', function(d) {\n    return 'translate(' + d.x + ',' + d.y + ')';\n  });\n}\n\n// update graph (called when needed)\nfunction restart() {\n  // path (link) group\n  path = path.data(links);\n\n  // update existing links\n  path.classed('selected', function(d) { return d === selected_link; })\n    .style('marker-start', function(d) { return d.left ? 'url(#start-arrow)' : ''; })\n    .style('marker-end', function(d) { return d.right ? 'url(#end-arrow)' : ''; });\n\n\n  // add new links\n  path.enter().append('svg:path')\n    .attr('class', 'link')\n    .classed('selected', function(d) { return d === selected_link; })\n    .style('marker-start', function(d) { return d.left ? 'url(#start-arrow)' : ''; })\n    .style('marker-end', function(d) { return d.right ? 'url(#end-arrow)' : ''; })\n    .on('mousedown', function(d) {\n      if(d3.event.ctrlKey) return;\n\n      // select link\n      mousedown_link = d;\n      if(mousedown_link === selected_link) selected_link = null;\n      else selected_link = mousedown_link;\n      selected_node = null;\n      restart();\n    });\n\n  // remove old links\n  path.exit().remove();\n\n\n  // circle (node) group\n  // NB: the function arg is crucial here! nodes are known by id, not by index!\n  circle = circle.data(nodes, function(d) { return d.id; });\n\n  // update existing nodes (reflexive & selected visual states)\n  circle.selectAll('circle')\n    .style('fill', function(d) { return (d === selected_node) ? d3.rgb(colors(d.id)).brighter().toString() : colors(d.id); })\n    .classed('reflexive', function(d) { return d.reflexive; });\n\n  // add new nodes\n  var g = circle.enter().append('svg:g');\n\n  g.append('svg:circle')\n    .attr('class', 'node')\n    .attr('r', 12)\n    .style('fill', function(d) { return (d === selected_node) ? d3.rgb(colors(d.id)).brighter().toString() : colors(d.id); })\n    .style('stroke', function(d) { return d3.rgb(colors(d.id)).darker().toString(); })\n    .classed('reflexive', function(d) { return d.reflexive; })\n    .on('mouseover', function(d) {\n      if(!mousedown_node || d === mousedown_node) return;\n      // enlarge target node\n      d3.select(this).attr('transform', 'scale(1.1)');\n    })\n    .on('mouseout', function(d) {\n      if(!mousedown_node || d === mousedown_node) return;\n      // unenlarge target node\n      d3.select(this).attr('transform', '');\n    })\n    .on('mousedown', function(d) {\n      if(d3.event.ctrlKey) return;\n\n      // select node\n      mousedown_node = d;\n      if(mousedown_node === selected_node) selected_node = null;\n      else selected_node = mousedown_node;\n      selected_link = null;\n\n      // reposition drag line\n      drag_line\n        .style('marker-end', 'url(#end-arrow)')\n        .classed('hidden', false)\n        .attr('d', 'M' + mousedown_node.x + ',' + mousedown_node.y + 'L' + mousedown_node.x + ',' + mousedown_node.y);\n\n      restart();\n    })\n    .on('mouseup', function(d) {\n      if(!mousedown_node) return;\n\n      // needed by FF\n      drag_line\n        .classed('hidden', true)\n        .style('marker-end', '');\n\n      // check for drag-to-self\n      mouseup_node = d;\n      if(mouseup_node === mousedown_node) { resetMouseVars(); return; }\n\n      // unenlarge target node\n      d3.select(this).attr('transform', '');\n\n      // add link to graph (update if exists)\n      // NB: links are strictly source < target; arrows separately specified by booleans\n      var source, target, direction;\n      if(mousedown_node.id < mouseup_node.id) {\n        source = mousedown_node;\n        target = mouseup_node;\n        direction = 'right';\n      } else {\n        source = mouseup_node;\n        target = mousedown_node;\n        direction = 'left';\n      }\n\n      var link;\n      link = links.filter(function(l) {\n        return (l.source === source && l.target === target);\n      })[0];\n\n      if(link) {\n        link[direction] = true;\n      } else {\n        link = {source: source, target: target, left: false, right: false};\n        link[direction] = true;\n        links.push(link);\n      }\n\n      // select new link\n      selected_link = link;\n      selected_node = null;\n      restart();\n    });\n\n  // show node IDs\n  g.append('svg:text')\n      .attr('x', 0)\n      .attr('y', 4)\n      .attr('class', 'id')\n      .text(function(d) { return d.id; });\n\n  // remove old nodes\n  circle.exit().remove();\n\n  //if(d3.event) d3.event.preventDefault();\n\n  // set the graph in motion\n  force.start();\n}\n\nfunction mousedown() {\n  // because :active only works in WebKit?\n  svg.classed('active', true);\n\n  if(d3.event.ctrlKey || mousedown_node || mousedown_link) return;\n\n  // insert new node at point\n  var point = d3.mouse(this),\n      node = {id: ++lastNodeId, reflexive: false};\n  node.x = point[0];\n  node.y = point[1];\n  nodes.push(node);\n\n  restart();\n}\n\nfunction mousemove() {\n  if(!mousedown_node) return;\n\n  // update drag line\n  drag_line.attr('d', 'M' + mousedown_node.x + ',' + mousedown_node.y + 'L' + d3.mouse(this)[0] + ',' + d3.mouse(this)[1]);\n\n  restart();\n}\n\nfunction mouseup() {\n  if(mousedown_node) {\n    // hide drag line\n    drag_line\n      .classed('hidden', true)\n      .style('marker-end', '');\n  }\n\n  // because :active only works in WebKit?\n  svg.classed('active', false);\n\n  // clear mouse event vars\n  resetMouseVars();\n}\n\nfunction spliceLinksForNode(node) {\n  var toSplice = links.filter(function(l) {\n    return (l.source === node || l.target === node);\n  });\n  toSplice.map(function(l) {\n    links.splice(links.indexOf(l), 1);\n  });\n}\n\nfunction keydown() {\n  // ctrl\n  if(d3.event.keyCode === 17) {\n    circle.call(force.drag);\n    svg.classed('ctrl', true);\n  }\n\n  if(!selected_node && !selected_link) return;\n  switch(d3.event.keyCode) {\n    case 46: // delete\n      if(selected_node) {\n        nodes.splice(nodes.indexOf(selected_node), 1);\n        spliceLinksForNode(selected_node);\n      } else if(selected_link) {\n        links.splice(links.indexOf(selected_link), 1);\n      }\n      selected_link = null;\n      selected_node = null;\n      restart();\n      break;\n    case 66: // B\n      if(selected_link) {\n        // set link direction to both left and right\n        selected_link.left = true;\n        selected_link.right = true;\n      }\n      restart();\n      break;\n    case 76: // L\n      if(selected_link) {\n        // set link direction to left only\n        selected_link.left = true;\n        selected_link.right = false;\n      }\n      restart();\n      break;\n    case 82: // R\n      if(selected_node) {\n        // toggle node reflexivity\n        selected_node.reflexive = !selected_node.reflexive;\n      } else if(selected_link) {\n        // set link direction to right only\n        selected_link.left = false;\n        selected_link.right = true;\n      }\n      restart();\n      break;\n  }\n}\n\nfunction keyup() {\n  // ctrl\n  if(d3.event.keyCode === 17) {\n    circle\n      .on('mousedown.drag', null)\n      .on('touchstart.drag', null);\n    svg.classed('ctrl', false);\n  }\n}\n\n// app starts here\nsvg.on('mousedown', mousedown)\n  .on('mousemove', mousemove)\n  .on('mouseup', mouseup);\nd3.select(window)\n  .on('keydown', keydown)\n  .on('keyup', keyup);\nrestart();"]],"start1":0,"start2":0,"length1":0,"length2":9980}]],"length":9980,"saved":false}
{"ts":1362481060065,"patch":[[{"diffs":[[0,"keyup);\n"],[1,"d3.select('#stock_details .sym').on(\"contextmenu\", function(data, index) {\n    d3.select('#my_custom_menu')\n      .style('position', 'absolute')\n      .style('left', d3.event.x + \"px\")\n      .style('top', d3.event.y + \"px\")\n      .style('display', 'block');\n\n    d3.event.preventDefault();\n});\n"],[0,"restart("]],"start1":9963,"start2":9963,"length1":16,"length2":310}]],"length":10275,"saved":false}
{"contributors":[],"silentsave":false,"ts":1362494974431,"patch":[[{"diffs":[[0,"}\n  ];\n\n"],[1,"function runBFS(currentLevel){\n\tnextLevel = Array();\n\tconsole.log(currentLevel.toString());\n\tfor(i =0; i< links.length;i++){\n\t\tfor(j=0;j<currentLevel.length;j++){\n\t\t\tif(links[i].source.id == currentLevel[j]){\n\t\t\t\tnextLevel.append(links[i].target.id)\n\t\t\t\t//TODO: az élet is át kéne színezni\n\n\t\t\t}\n\t\t}\n\t}\n\tif(nextLevel.length > 0)\n\t\trunBFS(nextLevel);\n\n}\n"],[0,"// init "]],"start1":716,"start2":716,"length1":16,"length2":369},{"diffs":[[0,"', tick)"],[1,";"],[0,"\n\n// def"]],"start1":1248,"start2":1248,"length1":16,"length2":17},{"diffs":[[0,".keyCode) {\n"],[1,"  \tcase 13: // Enter\n  \t\tif(selected_node){\n  \t\t\trunBFS([selected_node.id]);\n  \t\t}\n  \t\tbreak;\n"],[0,"    case 46:"]],"start1":8892,"start2":8892,"length1":24,"length2":118},{"diffs":[[0,"mouseup)"],[-1,""],[0,""],[1,"\n  "],[0,";\nd3.sel"]],"start1":10341,"start2":10341,"length1":16,"length2":19},{"diffs":[[0,"yup)"],[-1,";\nd3.select('#stock_details .sym')"],[1,"\n  //"],[0,".on("]],"start1":10415,"start2":10415,"length1":42,"length2":13},{"diffs":[[0,"nu\","],[-1," function"],[1,"runBFS"],[0,"(data,"],[-1," "],[0,"index)"],[-1," {\n    d3.select('#my_custom_menu')\n      .style('position', 'absolute')\n      .style('left', d3.event.x + \"px\")\n      .style('top', d3.event.y + \"px\")\n      .style('display', 'block');\n\n    d3.event.preventDefault();\n});"],[1,")\n\n  ;\n\n\n"],[0,"\nres"]],"start1":10438,"start2":10438,"length1":251,"length2":35}]],"length":10480,"saved":false}
{"ts":1362495076313,"patch":[[{"diffs":[[0,"tLevel.a"],[-1,"ppen"],[1,"d"],[0,"d(links["]],"start1":940,"start2":940,"length1":20,"length2":17}]],"length":10477,"saved":false}
{"ts":1362495079727,"patch":[[{"diffs":[[0,"rget.id)"],[1,";"],[0,"\n\t\t\t\t//T"]],"start1":962,"start2":962,"length1":16,"length2":17}]],"length":10478,"saved":false}
{"ts":1362495101723,"patch":[[{"diffs":[[0,"xtLevel."],[-1,"add"],[1,"push"],[0,"(links[i"]],"start1":939,"start2":939,"length1":19,"length2":20}]],"length":10479,"saved":false}
{"ts":1362495441553,"patch":[[{"diffs":[[0,"ing());\n"],[1,"\tfor(j=0;j<currentLevel.length;j++){\n\t\tif(links[i].source.id == currentLevel[j]){\n\t\t\tlinks[i].source.attr(\"class\",\"visited\");\n\t\t}\n\t}\n"],[0,"\tfor(i ="]],"start1":808,"start2":808,"length1":16,"length2":149}]],"length":10612,"saved":false}
{"ts":1362495467692,"patch":[[{"diffs":[[0,"++){\n\t\tif(links["],[-1,"i"],[1,"j"],[0,"].source.id == c"]],"start1":848,"start2":848,"length1":33,"length2":33},{"diffs":[[0,"){\n\t\t\tlinks["],[-1,"i"],[1,"j"],[0,"].source.att"]],"start1":895,"start2":895,"length1":25,"length2":25}]],"length":10612,"saved":false}
{"ts":1362495512681,"patch":[[{"diffs":[[0,".source."],[1,"append."],[0,"attr(\"cl"]],"start1":909,"start2":909,"length1":16,"length2":23}]],"length":10619,"saved":false}
{"ts":1362495517099,"patch":[[{"diffs":[[0,"e.append"],[1,"()"],[0,".attr(\"c"]],"start1":915,"start2":915,"length1":16,"length2":18}]],"length":10621,"saved":false}
{"ts":1362495536104,"patch":[[{"diffs":[[0,".append("],[1,"\"circle\""],[0,").attr(\""]],"start1":916,"start2":916,"length1":16,"length2":24}]],"length":10629,"saved":false}
{"ts":1362495594295,"patch":[[{"diffs":[[0,"rce."],[-1,"append(\"circle\")."],[0,"attr"]],"start1":913,"start2":913,"length1":25,"length2":8}]],"length":10612,"saved":false}
{"ts":1362495639422,"patch":[[{"diffs":[[0,".source."],[1,"style(\"color:red\");\n\t\t\t//"],[0,"attr(\"cl"]],"start1":909,"start2":909,"length1":16,"length2":41}]],"length":10637,"saved":false}
{"contributors":[],"silentsave":false,"ts":1362495798512,"patch":[[{"diffs":[[0,"ited\");\n"],[1,"\t\t\tcircle.selectAll('circle')\n    \t\t\t.style('fill',  d3.rgb(colors(\"red\")).toString() })\n"],[0,"\t\t}\n\t}\n\t"]],"start1":959,"start2":959,"length1":16,"length2":105}]],"length":10726,"saved":false}
{"ts":1362495811882,"patch":[[{"diffs":[[0,"ing() })"],[1,";"],[0,"\n\t\t}\n\t}\n"]],"start1":1047,"start2":1047,"length1":16,"length2":17}]],"length":10727,"saved":false}
{"ts":1362495817735,"patch":[[{"diffs":[[0,"String()"],[-1," }"],[0,");\n\t\t}\n\t"]],"start1":1044,"start2":1044,"length1":18,"length2":16}]],"length":10725,"saved":false}
{"ts":1362495851096,"patch":[[{"diffs":[[0,"ing());\n"],[1,"\t/*\n"],[0,"\tfor(j=0"]],"start1":808,"start2":808,"length1":16,"length2":20},{"diffs":[[0,"\n\t\t}\n\t}\n"],[1,"\t*/\n"],[0,"\tfor(i ="]],"start1":1058,"start2":1058,"length1":16,"length2":20}]],"length":10733,"saved":false}
{"contributors":[],"silentsave":false,"ts":1362502154061,"patch":[[{"diffs":[[0,"));\n"],[-1,"\t/*"],[0,"\n\tfo"]],"start1":812,"start2":812,"length1":11,"length2":8},{"diffs":[[0,"\n\t}\n"],[-1,"\t*/"],[0,"\n\tfo"]],"start1":1059,"start2":1059,"length1":11,"length2":8}]],"length":10727,"saved":false}
{"ts":1362502267296,"patch":[[{"diffs":[[0,"));\n"],[-1,"\n\tfor(j=0;j<currentLevel.length;j++){\n\t\tif(links[j].source.id == currentLevel[j]){\n\t\t\tlinks[j].source.style(\"color:red\");\n\t\t\t//attr(\"class\",\"visited\");\n\t\t\tcircle.selectAll('circle')\n    \t\t\t.style('fill',  d3.rgb(colors(\"red\")).toString());\n\t\t}\n\t}\n\n"],[0,"\tfor"]],"start1":812,"start2":812,"length1":256,"length2":8}]],"length":10479,"saved":false}
{"ts":1362502271481,"patch":[[{"diffs":[[0,"zínezni\n"],[-1,"\n"],[0,"\t\t\t}\n\t\t}"]],"start1":1005,"start2":1005,"length1":17,"length2":16}]],"length":10478,"saved":false}
{"ts":1362521739305,"patch":[[{"diffs":[[0,"ing());\n"],[1,"\n"],[0,"\tfor(i ="]],"start1":808,"start2":808,"length1":16,"length2":17}]],"length":10479,"saved":false}
{"contributors":[],"silentsave":false,"ts":1363083076797,"patch":[[{"diffs":[[0,"ing());\n"],[1,"\tcircle.attr('class','selected');"],[0,"\n\tfor(i "]],"start1":808,"start2":808,"length1":16,"length2":49},{"diffs":[[0,"zínezni\n"],[1,"\n"],[0,"\t\t\t}\n\t\t}"]],"start1":1039,"start2":1039,"length1":16,"length2":17}]],"length":10513,"saved":false}
{"ts":1363083196788,"patch":[[{"diffs":[[0,"));\n"],[-1,"\tcircle.attr('class','selected');"],[0,"\n\tfo"]],"start1":812,"start2":812,"length1":41,"length2":8},{"diffs":[[0,"színezni"],[1,"\n\t\t\t\tfor(k=0;k<circle.length;i++)"],[0,"\n\n\t\t\t}\n\t"]],"start1":1005,"start2":1005,"length1":16,"length2":49}]],"length":10513,"saved":false}
{"ts":1363083310364,"patch":[[{"diffs":[[0,"gth;i++)"],[1,"{\n\t\t\t\t\tif(circle[k].__data__.id == links[i].source.id){\n\t\t\t\t\t\tcircle[k].attr('class','currentlevel');\n\t\t\t\t\t}\n\t\t\t\t}"],[0,"\n\n\t\t\t}\n\t"]],"start1":1038,"start2":1038,"length1":16,"length2":130}]],"length":10627,"saved":false}
{"ts":1363083467671,"patch":[[{"diffs":[[0,"[k]."],[-1,"__data__."],[0,"id ="]],"start1":1062,"start2":1062,"length1":17,"length2":8}]],"length":10618,"saved":false}
{"ts":1363083596303,"patch":[[{"diffs":[[0,"h;j++){\n"],[1,"\t\t\tid = links[i].source.id\n"],[0,"\t\t\tif(li"]],"start1":880,"start2":880,"length1":16,"length2":43},{"diffs":[[0,"el[j]){\n"],[1,"\n"],[0,"\t\t\t\tnext"]],"start1":953,"start2":953,"length1":16,"length2":17},{"diffs":[[0,"+){\n"],[1,"\n"],[0,"\t\t\t\t\t"],[-1,"if("],[1,"\t"],[0,"circle["],[-1,"k].id == links[i].source.id){\n\t\t\t\t\t\tcircle[k"],[1,"id"],[0,"].at"]],"start1":1072,"start2":1072,"length1":67,"length2":24}]],"length":10603,"saved":false}
{"ts":1363083603534,"patch":[[{"diffs":[[0,"\tif("],[-1,"links[i].source."],[0,"id"],[-1," "],[0,"== c"]],"start1":917,"start2":917,"length1":27,"length2":10}]],"length":10586,"saved":false}
{"ts":1363083671376,"patch":[[{"diffs":[[0,"ource.id"],[1,";"],[0,"\n\t\t\tif(i"]],"start1":906,"start2":906,"length1":16,"length2":17}]],"length":10587,"saved":false}
{"ts":1363083693377,"patch":[[{"diffs":[[0,"');\n"],[-1,"\t\t\t\t\t}"],[0,"\n\t\t\t"]],"start1":1104,"start2":1104,"length1":14,"length2":8}]],"length":10581,"saved":false}
{"ts":1363083853519,"patch":[[{"diffs":[[0,"ing());\n"],[1,"\tcircle.attr('class',currentlevel);"],[0,"\n\tfor(i "]],"start1":808,"start2":808,"length1":16,"length2":51}]],"length":10616,"saved":false}
{"ts":1363083860282,"patch":[[{"diffs":[[0,"());\n\tcircle"],[1,"[2]"],[0,".attr('class"]],"start1":811,"start2":811,"length1":24,"length2":27}]],"length":10619,"saved":false}
{"ts":1363083888303,"patch":[[{"diffs":[[0,"'class',"],[1,"'"],[0,"currentl"]],"start1":832,"start2":832,"length1":16,"length2":17},{"diffs":[[0,"entlevel"],[1,"'"],[0,");\n\tfor("]],"start1":845,"start2":845,"length1":16,"length2":17}]],"length":10621,"saved":false}
{"ts":1363084055779,"patch":[[{"diffs":[[0,"rcle[2]."],[1,"data."],[0,"attr('cl"]],"start1":819,"start2":819,"length1":16,"length2":21}]],"length":10626,"saved":false}
{"ts":1363084080118,"patch":[[{"diffs":[[0,"[2]."],[-1,"data."],[0,"attr"]],"start1":823,"start2":823,"length1":13,"length2":8}]],"length":10621,"saved":false}
{"ts":1363084128960,"patch":[[{"diffs":[[0,"evel');\n"],[1,"\n"],[0,"\tfor(i ="]],"start1":849,"start2":849,"length1":16,"length2":17}]],"length":10622,"saved":false}
{"ts":1363084223114,"patch":[[{"diffs":[[0,"rcle[2]."],[1,"enter()."],[0,"attr('cl"]],"start1":819,"start2":819,"length1":16,"length2":24}]],"length":10630,"saved":false}
{"ts":1363084248884,"patch":[[{"diffs":[[0,"\tcircle["],[-1,"2"],[1,"0"],[0,"].enter("]],"start1":816,"start2":816,"length1":17,"length2":17}]],"length":10630,"saved":false}
{"ts":1363084273662,"patch":[[{"diffs":[[0,"rcle[0]."],[-1,"enter()."],[0,"attr('cl"]],"start1":819,"start2":819,"length1":24,"length2":16}]],"length":10622,"saved":false}
{"ts":1363084280764,"patch":[[{"diffs":[[0,"tr('class','"],[-1,"currentlevel"],[1,"WAT"],[0,"');\n\n\tfor(i "]],"start1":829,"start2":829,"length1":36,"length2":27}]],"length":10613,"saved":false}
{"ts":1363084281891,"patch":[[{"diffs":[[-1,"// set up SVG for D3\nvar width  = 960,\n    height = 500,\n    colors = d3.scale.category10();\n\nvar svg = d3.select('body')\n  .append('svg')\n  .attr('width', width)\n  .attr('height', height);\n\n// set up initial nodes and links\n//  - nodes are known by 'id', not by index in array.\n//  - reflexive edges are indicated on the node (as a bold black circle).\n//  - links are always source < target; edge directions are set by 'left' and 'right'.\nvar nodes = [\n    {id: 0, reflexive: false},\n    {id: 1, reflexive: true },\n    {id: 2, reflexive: false}\n  ],\n  lastNodeId = 2,\n  links = [\n    {source: nodes[0], target: nodes[1], left: false, right: true },\n    {source: nodes[1], target: nodes[2], left: false, right: true }\n  ];\n\nfunction runBFS(currentLevel){\n\tnextLevel = Array();\n\tconsole.log(currentLevel.toString());\n\tcircle[0].attr('class','WAT');\n\n\tfor(i =0; i< links.length;i++){\n\t\tfor(j=0;j<currentLevel.length;j++){\n\t\t\tid = links[i].source.id;\n\t\t\tif(id== currentLevel[j]){\n\n\t\t\t\tnextLevel.push(links[i].target.id);\n\t\t\t\t//TODO: az élet is át kéne színezni\n\t\t\t\tfor(k=0;k<circle.length;i++){\n\n\t\t\t\t\t\tcircle[id].attr('class','currentlevel');\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t}\n\tif(nextLevel.length > 0)\n\t\trunBFS(nextLevel);\n\n}\n// init D3 force layout\nvar force = d3.layout.force()\n    .nodes(nodes)\n    .links(links)\n    .size([width, height])\n    .linkDistance(150)\n    .charge(-500)\n    .on('tick', tick);\n\n// define arrow markers for graph links\nsvg.append('svg:defs').append('svg:marker')\n    .attr('id', 'end-arrow')\n    .attr('viewBox', '0 -5 10 10')\n    .attr('refX', 6)\n    .attr('markerWidth', 3)\n    .attr('markerHeight', 3)\n    .attr('orient', 'auto')\n  .append('svg:path')\n    .attr('d', 'M0,-5L10,0L0,5')\n    .attr('fill', '#000');\n\nsvg.append('svg:defs').append('svg:marker')\n    .attr('id', 'start-arrow')\n    .attr('viewBox', '0 -5 10 10')\n    .attr('refX', 4)\n    .attr('markerWidth', 3)\n    .attr('markerHeight', 3)\n    .attr('orient', 'auto')\n  .append('svg:path')\n    .attr('d', 'M10,-5L0,0L10,5')\n    .attr('fill', '#000');\n\n// line displayed when dragging new nodes\nvar drag_line = svg.append('svg:path')\n  .attr('class', 'link dragline hidden')\n  .attr('d', 'M0,0L0,0');\n\n// handles to link and node element groups\nvar path = svg.append('svg:g').selectAll('path'),\n    circle = svg.append('svg:g').selectAll('g');\n\n// mouse event vars\nvar selected_node = null,\n    selected_link = null,\n    mousedown_link = null,\n    mousedown_node = null,\n    mouseup_node = null;\n\nfunction resetMouseVars() {\n  mousedown_node = null;\n  mouseup_node = null;\n  mousedown_link = null;\n}\n\n// update force layout (called automatically each iteration)\nfunction tick() {\n  // draw directed edges with proper padding from node centers\n  path.attr('d', function(d) {\n    var deltaX = d.target.x - d.source.x,\n        deltaY = d.target.y - d.source.y,\n        dist = Math.sqrt(deltaX * deltaX + deltaY * deltaY),\n        normX = deltaX / dist,\n        normY = deltaY / dist,\n        sourcePadding = d.left ? 17 : 12,\n        targetPadding = d.right ? 17 : 12,\n        sourceX = d.source.x + (sourcePadding * normX),\n        sourceY = d.source.y + (sourcePadding * normY),\n        targetX = d.target.x - (targetPadding * normX),\n        targetY = d.target.y - (targetPadding * normY);\n    return 'M' + sourceX + ',' + sourceY + 'L' + targetX + ',' + targetY;\n  });\n\n  circle.attr('transform', function(d) {\n    return 'translate(' + d.x + ',' + d.y + ')';\n  });\n}\n\n// update graph (called when needed)\nfunction restart() {\n  // path (link) group\n  path = path.data(links);\n\n  // update existing links\n  path.classed('selected', function(d) { return d === selected_link; })\n    .style('marker-start', function(d) { return d.left ? 'url(#start-arrow)' : ''; })\n    .style('marker-end', function(d) { return d.right ? 'url(#end-arrow)' : ''; });\n\n\n  // add new links\n  path.enter().append('svg:path')\n    .attr('class', 'link')\n    .classed('selected', function(d) { return d === selected_link; })\n    .style('marker-start', function(d) { return d.left ? 'url(#start-arrow)' : ''; })\n    .style('marker-end', function(d) { return d.right ? 'url(#end-arrow)' : ''; })\n    .on('mousedown', function(d) {\n      if(d3.event.ctrlKey) return;\n\n      // select link\n      mousedown_link = d;\n      if(mousedown_link === selected_link) selected_link = null;\n      else selected_link = mousedown_link;\n      selected_node = null;\n      restart();\n    });\n\n  // remove old links\n  path.exit().remove();\n\n\n  // circle (node) group\n  // NB: the function arg is crucial here! nodes are known by id, not by index!\n  circle = circle.data(nodes, function(d) { return d.id; });\n\n  // update existing nodes (reflexive & selected visual states)\n  circle.selectAll('circle')\n    .style('fill', function(d) { return (d === selected_node) ? d3.rgb(colors(d.id)).brighter().toString() : colors(d.id); })\n    .classed('reflexive', function(d) { return d.reflexive; });\n\n  // add new nodes\n  var g = circle.enter().append('svg:g');\n\n  g.append('svg:circle')\n    .attr('class', 'node')\n    .attr('r', 12)\n    .style('fill', function(d) { return (d === selected_node) ? d3.rgb(colors(d.id)).brighter().toString() : colors(d.id); })\n    .style('stroke', function(d) { return d3.rgb(colors(d.id)).darker().toString(); })\n    .classed('reflexive', function(d) { return d.reflexive; })\n    .on('mouseover', function(d) {\n      if(!mousedown_node || d === mousedown_node) return;\n      // enlarge target node\n      d3.select(this).attr('transform', 'scale(1.1)');\n    })\n    .on('mouseout', function(d) {\n      if(!mousedown_node || d === mousedown_node) return;\n      // unenlarge target node\n      d3.select(this).attr('transform', '');\n    })\n    .on('mousedown', function(d) {\n      if(d3.event.ctrlKey) return;\n\n      // select node\n      mousedown_node = d;\n      if(mousedown_node === selected_node) selected_node = null;\n      else selected_node = mousedown_node;\n      selected_link = null;\n\n      // reposition drag line\n      drag_line\n        .style('marker-end', 'url(#end-arrow)')\n        .classed('hidden', false)\n        .attr('d', 'M' + mousedown_node.x + ',' + mousedown_node.y + 'L' + mousedown_node.x + ',' + mousedown_node.y);\n\n      restart();\n    })\n    .on('mouseup', function(d) {\n      if(!mousedown_node) return;\n\n      // needed by FF\n      drag_line\n        .classed('hidden', true)\n        .style('marker-end', '');\n\n      // check for drag-to-self\n      mouseup_node = d;\n      if(mouseup_node === mousedown_node) { resetMouseVars(); return; }\n\n      // unenlarge target node\n      d3.select(this).attr('transform', '');\n\n      // add link to graph (update if exists)\n      // NB: links are strictly source < target; arrows separately specified by booleans\n      var source, target, direction;\n      if(mousedown_node.id < mouseup_node.id) {\n        source = mousedown_node;\n        target = mouseup_node;\n        direction = 'right';\n      } else {\n        source = mouseup_node;\n        target = mousedown_node;\n        direction = 'left';\n      }\n\n      var link;\n      link = links.filter(function(l) {\n        return (l.source === source && l.target === target);\n      })[0];\n\n      if(link) {\n        link[direction] = true;\n      } else {\n        link = {source: source, target: target, left: false, right: false};\n        link[direction] = true;\n        links.push(link);\n      }\n\n      // select new link\n      selected_link = link;\n      selected_node = null;\n      restart();\n    });\n\n  // show node IDs\n  g.append('svg:text')\n      .attr('x', 0)\n      .attr('y', 4)\n      .attr('class', 'id')\n      .text(function(d) { return d.id; });\n\n  // remove old nodes\n  circle.exit().remove();\n\n  //if(d3.event) d3.event.preventDefault();\n\n  // set the graph in motion\n  force.start();\n}\n\nfunction mousedown() {\n  // because :active only works in WebKit?\n  svg.classed('active', true);\n\n  if(d3.event.ctrlKey || mousedown_node || mousedown_link) return;\n\n  // insert new node at point\n  var point = d3.mouse(this),\n      node = {id: ++lastNodeId, reflexive: false};\n  node.x = point[0];\n  node.y = point[1];\n  nodes.push(node);\n\n  restart();\n}\n\nfunction mousemove() {\n  if(!mousedown_node) return;\n\n  // update drag line\n  drag_line.attr('d', 'M' + mousedown_node.x + ',' + mousedown_node.y + 'L' + d3.mouse(this)[0] + ',' + d3.mouse(this)[1]);\n\n  restart();\n}\n\nfunction mouseup() {\n  if(mousedown_node) {\n    // hide drag line\n    drag_line\n      .classed('hidden', true)\n      .style('marker-end', '');\n  }\n\n  // because :active only works in WebKit?\n  svg.classed('active', false);\n\n  // clear mouse event vars\n  resetMouseVars();\n}\n\nfunction spliceLinksForNode(node) {\n  var toSplice = links.filter(function(l) {\n    return (l.source === node || l.target === node);\n  });\n  toSplice.map(function(l) {\n    links.splice(links.indexOf(l), 1);\n  });\n}\n\nfunction keydown() {\n  // ctrl\n  if(d3.event.keyCode === 17) {\n    circle.call(force.drag);\n    svg.classed('ctrl', true);\n  }\n\n  if(!selected_node && !selected_link) return;\n  switch(d3.event.keyCode) {\n  \tcase 13: // Enter\n  \t\tif(selected_node){\n  \t\t\trunBFS([selected_node.id]);\n  \t\t}\n  \t\tbreak;\n    case 46: // delete\n      if(selected_node) {\n        nodes.splice(nodes.indexOf(selected_node), 1);\n        spliceLinksForNode(selected_node);\n      } else if(selected_link) {\n        links.splice(links.indexOf(selected_link), 1);\n      }\n      selected_link = null;\n      selected_node = null;\n      restart();\n      break;\n    case 66: // B\n      if(selected_link) {\n        // set link direction to both left and right\n        selected_link.left = true;\n        selected_link.right = true;\n      }\n      restart();\n      break;\n    case 76: // L\n      if(selected_link) {\n        // set link direction to left only\n        selected_link.left = true;\n        selected_link.right = false;\n      }\n      restart();\n      break;\n    case 82: // R\n      if(selected_node) {\n        // toggle node reflexivity\n        selected_node.reflexive = !selected_node.reflexive;\n      } else if(selected_link) {\n        // set link direction to right only\n        selected_link.left = false;\n        selected_link.right = true;\n      }\n      restart();\n      break;\n  }\n}\n\nfunction keyup() {\n  // ctrl\n  if(d3.event.keyCode === 17) {\n    circle\n      .on('mousedown.drag', null)\n      .on('touchstart.drag', null);\n    svg.classed('ctrl', false);\n  }\n}\n\n// app starts here\nsvg.on('mousedown', mousedown)\n  .on('mousemove', mousemove)\n  .on('mouseup', mouseup)\n  ;\nd3.select(window)\n  .on('keydown', keydown)\n  .on('keyup', keyup)\n  //.on(\"contextmenu\",runBFS(data,index))\n\n  ;\n\n\n\nrestart();"]],"start1":0,"start2":0,"length1":10613,"length2":0}]],"length":0,"saved":false}
{"ts":1363084287084,"patch":[[{"diffs":[[1,"// set up SVG for D3\nvar width  = 960,\n    height = 500,\n    colors = d3.scale.category10();\n\nvar svg = d3.select('body')\n  .append('svg')\n  .attr('width', width)\n  .attr('height', height);\n\n// set up initial nodes and links\n//  - nodes are known by 'id', not by index in array.\n//  - reflexive edges are indicated on the node (as a bold black circle).\n//  - links are always source < target; edge directions are set by 'left' and 'right'.\nvar nodes = [\n    {id: 0, reflexive: false},\n    {id: 1, reflexive: true },\n    {id: 2, reflexive: false}\n  ],\n  lastNodeId = 2,\n  links = [\n    {source: nodes[0], target: nodes[1], left: false, right: true },\n    {source: nodes[1], target: nodes[2], left: false, right: true }\n  ];\n\nfunction runBFS(currentLevel){\n\tnextLevel = Array();\n\tconsole.log(currentLevel.toString());\n\tcircle[0].attr('class','WAT');\n\n\tfor(i =0; i< links.length;i++){\n\t\tfor(j=0;j<currentLevel.length;j++){\n\t\t\tid = links[i].source.id;\n\t\t\tif(id== currentLevel[j]){\n\n\t\t\t\tnextLevel.push(links[i].target.id);\n\t\t\t\t//TODO: az élet is át kéne színezni\n\t\t\t\tfor(k=0;k<circle.length;i++){\n\n\t\t\t\t\t\tcircle[id].attr('class','currentlevel');\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t}\n\t}\n\tif(nextLevel.length > 0)\n\t\trunBFS(nextLevel);\n\n}\n// init D3 force layout\nvar force = d3.layout.force()\n    .nodes(nodes)\n    .links(links)\n    .size([width, height])\n    .linkDistance(150)\n    .charge(-500)\n    .on('tick', tick);\n\n// define arrow markers for graph links\nsvg.append('svg:defs').append('svg:marker')\n    .attr('id', 'end-arrow')\n    .attr('viewBox', '0 -5 10 10')\n    .attr('refX', 6)\n    .attr('markerWidth', 3)\n    .attr('markerHeight', 3)\n    .attr('orient', 'auto')\n  .append('svg:path')\n    .attr('d', 'M0,-5L10,0L0,5')\n    .attr('fill', '#000');\n\nsvg.append('svg:defs').append('svg:marker')\n    .attr('id', 'start-arrow')\n    .attr('viewBox', '0 -5 10 10')\n    .attr('refX', 4)\n    .attr('markerWidth', 3)\n    .attr('markerHeight', 3)\n    .attr('orient', 'auto')\n  .append('svg:path')\n    .attr('d', 'M10,-5L0,0L10,5')\n    .attr('fill', '#000');\n\n// line displayed when dragging new nodes\nvar drag_line = svg.append('svg:path')\n  .attr('class', 'link dragline hidden')\n  .attr('d', 'M0,0L0,0');\n\n// handles to link and node element groups\nvar path = svg.append('svg:g').selectAll('path'),\n    circle = svg.append('svg:g').selectAll('g');\n\n// mouse event vars\nvar selected_node = null,\n    selected_link = null,\n    mousedown_link = null,\n    mousedown_node = null,\n    mouseup_node = null;\n\nfunction resetMouseVars() {\n  mousedown_node = null;\n  mouseup_node = null;\n  mousedown_link = null;\n}\n\n// update force layout (called automatically each iteration)\nfunction tick() {\n  // draw directed edges with proper padding from node centers\n  path.attr('d', function(d) {\n    var deltaX = d.target.x - d.source.x,\n        deltaY = d.target.y - d.source.y,\n        dist = Math.sqrt(deltaX * deltaX + deltaY * deltaY),\n        normX = deltaX / dist,\n        normY = deltaY / dist,\n        sourcePadding = d.left ? 17 : 12,\n        targetPadding = d.right ? 17 : 12,\n        sourceX = d.source.x + (sourcePadding * normX),\n        sourceY = d.source.y + (sourcePadding * normY),\n        targetX = d.target.x - (targetPadding * normX),\n        targetY = d.target.y - (targetPadding * normY);\n    return 'M' + sourceX + ',' + sourceY + 'L' + targetX + ',' + targetY;\n  });\n\n  circle.attr('transform', function(d) {\n    return 'translate(' + d.x + ',' + d.y + ')';\n  });\n}\n\n// update graph (called when needed)\nfunction restart() {\n  // path (link) group\n  path = path.data(links);\n\n  // update existing links\n  path.classed('selected', function(d) { return d === selected_link; })\n    .style('marker-start', function(d) { return d.left ? 'url(#start-arrow)' : ''; })\n    .style('marker-end', function(d) { return d.right ? 'url(#end-arrow)' : ''; });\n\n\n  // add new links\n  path.enter().append('svg:path')\n    .attr('class', 'link')\n    .classed('selected', function(d) { return d === selected_link; })\n    .style('marker-start', function(d) { return d.left ? 'url(#start-arrow)' : ''; })\n    .style('marker-end', function(d) { return d.right ? 'url(#end-arrow)' : ''; })\n    .on('mousedown', function(d) {\n      if(d3.event.ctrlKey) return;\n\n      // select link\n      mousedown_link = d;\n      if(mousedown_link === selected_link) selected_link = null;\n      else selected_link = mousedown_link;\n      selected_node = null;\n      restart();\n    });\n\n  // remove old links\n  path.exit().remove();\n\n\n  // circle (node) group\n  // NB: the function arg is crucial here! nodes are known by id, not by index!\n  circle = circle.data(nodes, function(d) { return d.id; });\n\n  // update existing nodes (reflexive & selected visual states)\n  circle.selectAll('circle')\n    .style('fill', function(d) { return (d === selected_node) ? d3.rgb(colors(d.id)).brighter().toString() : colors(d.id); })\n    .classed('reflexive', function(d) { return d.reflexive; });\n\n  // add new nodes\n  var g = circle.enter().append('svg:g');\n\n  g.append('svg:circle')\n    .attr('class', 'node')\n    .attr('r', 12)\n    .style('fill', function(d) { return (d === selected_node) ? d3.rgb(colors(d.id)).brighter().toString() : colors(d.id); })\n    .style('stroke', function(d) { return d3.rgb(colors(d.id)).darker().toString(); })\n    .classed('reflexive', function(d) { return d.reflexive; })\n    .on('mouseover', function(d) {\n      if(!mousedown_node || d === mousedown_node) return;\n      // enlarge target node\n      d3.select(this).attr('transform', 'scale(1.1)');\n    })\n    .on('mouseout', function(d) {\n      if(!mousedown_node || d === mousedown_node) return;\n      // unenlarge target node\n      d3.select(this).attr('transform', '');\n    })\n    .on('mousedown', function(d) {\n      if(d3.event.ctrlKey) return;\n\n      // select node\n      mousedown_node = d;\n      if(mousedown_node === selected_node) selected_node = null;\n      else selected_node = mousedown_node;\n      selected_link = null;\n\n      // reposition drag line\n      drag_line\n        .style('marker-end', 'url(#end-arrow)')\n        .classed('hidden', false)\n        .attr('d', 'M' + mousedown_node.x + ',' + mousedown_node.y + 'L' + mousedown_node.x + ',' + mousedown_node.y);\n\n      restart();\n    })\n    .on('mouseup', function(d) {\n      if(!mousedown_node) return;\n\n      // needed by FF\n      drag_line\n        .classed('hidden', true)\n        .style('marker-end', '');\n\n      // check for drag-to-self\n      mouseup_node = d;\n      if(mouseup_node === mousedown_node) { resetMouseVars(); return; }\n\n      // unenlarge target node\n      d3.select(this).attr('transform', '');\n\n      // add link to graph (update if exists)\n      // NB: links are strictly source < target; arrows separately specified by booleans\n      var source, target, direction;\n      if(mousedown_node.id < mouseup_node.id) {\n        source = mousedown_node;\n        target = mouseup_node;\n        direction = 'right';\n      } else {\n        source = mouseup_node;\n        target = mousedown_node;\n        direction = 'left';\n      }\n\n      var link;\n      link = links.filter(function(l) {\n        return (l.source === source && l.target === target);\n      })[0];\n\n      if(link) {\n        link[direction] = true;\n      } else {\n        link = {source: source, target: target, left: false, right: false};\n        link[direction] = true;\n        links.push(link);\n      }\n\n      // select new link\n      selected_link = link;\n      selected_node = null;\n      restart();\n    });\n\n  // show node IDs\n  g.append('svg:text')\n      .attr('x', 0)\n      .attr('y', 4)\n      .attr('class', 'id')\n      .text(function(d) { return d.id; });\n\n  // remove old nodes\n  circle.exit().remove();\n\n  //if(d3.event) d3.event.preventDefault();\n\n  // set the graph in motion\n  force.start();\n}\n\nfunction mousedown() {\n  // because :active only works in WebKit?\n  svg.classed('active', true);\n\n  if(d3.event.ctrlKey || mousedown_node || mousedown_link) return;\n\n  // insert new node at point\n  var point = d3.mouse(this),\n      node = {id: ++lastNodeId, reflexive: false};\n  node.x = point[0];\n  node.y = point[1];\n  nodes.push(node);\n\n  restart();\n}\n\nfunction mousemove() {\n  if(!mousedown_node) return;\n\n  // update drag line\n  drag_line.attr('d', 'M' + mousedown_node.x + ',' + mousedown_node.y + 'L' + d3.mouse(this)[0] + ',' + d3.mouse(this)[1]);\n\n  restart();\n}\n\nfunction mouseup() {\n  if(mousedown_node) {\n    // hide drag line\n    drag_line\n      .classed('hidden', true)\n      .style('marker-end', '');\n  }\n\n  // because :active only works in WebKit?\n  svg.classed('active', false);\n\n  // clear mouse event vars\n  resetMouseVars();\n}\n\nfunction spliceLinksForNode(node) {\n  var toSplice = links.filter(function(l) {\n    return (l.source === node || l.target === node);\n  });\n  toSplice.map(function(l) {\n    links.splice(links.indexOf(l), 1);\n  });\n}\n\nfunction keydown() {\n  // ctrl\n  if(d3.event.keyCode === 17) {\n    circle.call(force.drag);\n    svg.classed('ctrl', true);\n  }\n\n  if(!selected_node && !selected_link) return;\n  switch(d3.event.keyCode) {\n  \tcase 13: // Enter\n  \t\tif(selected_node){\n  \t\t\trunBFS([selected_node.id]);\n  \t\t}\n  \t\tbreak;\n    case 46: // delete\n      if(selected_node) {\n        nodes.splice(nodes.indexOf(selected_node), 1);\n        spliceLinksForNode(selected_node);\n      } else if(selected_link) {\n        links.splice(links.indexOf(selected_link), 1);\n      }\n      selected_link = null;\n      selected_node = null;\n      restart();\n      break;\n    case 66: // B\n      if(selected_link) {\n        // set link direction to both left and right\n        selected_link.left = true;\n        selected_link.right = true;\n      }\n      restart();\n      break;\n    case 76: // L\n      if(selected_link) {\n        // set link direction to left only\n        selected_link.left = true;\n        selected_link.right = false;\n      }\n      restart();\n      break;\n    case 82: // R\n      if(selected_node) {\n        // toggle node reflexivity\n        selected_node.reflexive = !selected_node.reflexive;\n      } else if(selected_link) {\n        // set link direction to right only\n        selected_link.left = false;\n        selected_link.right = true;\n      }\n      restart();\n      break;\n  }\n}\n\nfunction keyup() {\n  // ctrl\n  if(d3.event.keyCode === 17) {\n    circle\n      .on('mousedown.drag', null)\n      .on('touchstart.drag', null);\n    svg.classed('ctrl', false);\n  }\n}\n\n// app starts here\nsvg.on('mousedown', mousedown)\n  .on('mousemove', mousemove)\n  .on('mouseup', mouseup)\n  ;\nd3.select(window)\n  .on('keydown', keydown)\n  .on('keyup', keyup)\n  //.on(\"contextmenu\",runBFS(data,index))\n\n  ;\n\n\n\nrestart();"]],"start1":0,"start2":0,"length1":0,"length2":10613}]],"length":10613,"saved":false}
{"contributors":[],"silentsave":false,"ts":1363085155612,"patch":[[{"diffs":[[0,"\n\tcircle"],[-1,"[0]"],[1,".data(0)"],[0,".attr('c"]],"start1":815,"start2":815,"length1":19,"length2":24},{"diffs":[[0,"\t\t\t\t"],[-1,"for(k=0;k<circle.length;i++){\n"],[1,"pontok=d3.selectAll('circle');\n\t\t\t\tfor(k=0;k<currentLevel.length;i++){\n\t\t\t\t\tpontok.attr('class','currentlevel');"],[0,"\n\t\t\t\t\t\t"],[1,"//"],[0,"circ"]],"start1":1063,"start2":1063,"length1":45,"length2":129}]],"length":10702,"saved":false}
{"contributors":[],"silentsave":false,"ts":1363087766001,"patch":[[{"diffs":[[0,"ng());\n\t"],[1,"//"],[0,"circle.d"]],"start1":809,"start2":809,"length1":16,"length2":18},{"diffs":[[0,"ezni\n\t\t\t"],[1,"-/*"],[0,"\tpontok="]],"start1":1060,"start2":1060,"length1":16,"length2":19},{"diffs":[[0,"\n\n\t\t\t\t}\n"],[1,"*/"],[0,"\n\t\t\t}\n\t\t"]],"start1":1233,"start2":1233,"length1":16,"length2":18}]],"length":10709,"saved":false}
{"ts":1363087869934,"patch":[[{"diffs":[[0,"\t\t\t-"],[-1,"/*"],[0,"\tpon"]],"start1":1065,"start2":1065,"length1":10,"length2":8},{"diffs":[[0,"++){\n\t\t\t"],[1,"//"],[0,"\t\tpontok"]],"start1":1136,"start2":1136,"length1":16,"length2":18},{"diffs":[[0,"\t\t}\n"],[-1,"*/"],[0,"\n\t\t\t"]],"start1":1237,"start2":1237,"length1":10,"length2":8}]],"length":10707,"saved":false}
{"ts":1363089585204,"patch":[[{"diffs":[[0,"le')"],[-1,";\n\t\t\t\tfor(k=0;k<currentLevel.length;i++){\n\t\t\t//\t\tpontok.attr('class','currentlevel');\n\t\t\t\t\t\t//circle[id].attr('class','currentlevel');\n"],[1,"[0];\n\t\t\t\tpontok.forEach(function(elem, i, arr){\n\t\t\t\t\telem.style.fill='#fff'"],[0,"\n\t\t\t\t}"],[1,")\n\n"],[0,"\n\n\t\t"]],"start1":1095,"start2":1095,"length1":149,"length2":92}]],"length":10650,"saved":false}
{"ts":1363089618615,"patch":[[{"diffs":[[0,"\n\t\t\t\t})\n"],[-1,"\n\n\n"],[0,"\t\t\t}\n\t\t}"]],"start1":1174,"start2":1174,"length1":19,"length2":16}]],"length":10647,"saved":false}
{"ts":1363089640769,"patch":[[{"diffs":[[0,"l='#fff'"],[1,";"],[0,"\n\t\t\t\t})\n"]],"start1":1166,"start2":1166,"length1":16,"length2":17}]],"length":10648,"saved":false}
{"ts":1363089781642,"patch":[[{"diffs":[[0,"\n\t\t\t"],[-1,"-"],[0,"\t"],[1,"-var "],[0,"pont"]],"start1":1064,"start2":1064,"length1":10,"length2":14}]],"length":10652,"saved":false}
{"ts":1363089848880,"patch":[[{"diffs":[[0,"zni\n\t\t\t\t"],[-1,"-"],[0,"var pont"]],"start1":1061,"start2":1061,"length1":17,"length2":16}]],"length":10651,"saved":false}
{"ts":1363089860733,"patch":[[{"diffs":[[0,"'WAT');\n"],[1,"\tvar pontok;"],[0,"\n\tfor(i "]],"start1":847,"start2":847,"length1":16,"length2":28},{"diffs":[[0,"zni\n\t\t\t\t"],[-1,"var "],[0,"pontok=d"]],"start1":1073,"start2":1073,"length1":20,"length2":16}]],"length":10659,"saved":false}
{"ts":1363090483917,"patch":[[{"diffs":[[0,"+){\n\t\t\ti"],[-1,"d = "],[1,"f("],[0,"links[i]"]],"start1":935,"start2":935,"length1":20,"length2":18},{"diffs":[[0,"e.id"],[-1,";\n\t\t\tif(id"],[1," "],[0,"== c"]],"start1":959,"start2":959,"length1":18,"length2":9},{"diffs":[[0,", arr){\n"],[1,"\t\t\t\t\tfor(var k=0;i<pontok)\n"],[0,"\t\t\t\t\tele"]],"start1":1139,"start2":1139,"length1":16,"length2":43}]],"length":10675,"saved":false}
{"ts":1363090508820,"patch":[[{"diffs":[[0,"el[j]){\n"],[-1,"\n"],[0,"\t\t\t\tnext"]],"start1":977,"start2":977,"length1":17,"length2":16}]],"length":10674,"saved":false}
{"ts":1363090646544,"patch":[[{"diffs":[[0,"evel){\n\t"],[1,"var "],[0,"nextLeve"]],"start1":748,"start2":748,"length1":16,"length2":20},{"diffs":[[0,"k=0;"],[-1,"i"],[1,"k"],[0,"<pontok"],[-1,")\n"],[1,";k++){\n\t\t\t\t\t\tif(elem.__data__.id == links[i].source.id){\n\t\t"],[0,"\t\t\t\t"]],"start1":1163,"start2":1163,"length1":18,"length2":75},{"diffs":[[0,"'#fff';\n"],[1,"\t\t\t\t\t\t}\n\t\t\t\t\t}\n"],[0,"\t\t\t\t})\n\t"]],"start1":1255,"start2":1255,"length1":16,"length2":31}]],"length":10750,"saved":false}
{"ts":1363091015514,"patch":[[{"diffs":[[0,"k<pontok"],[1,".length"],[0,";k++){\n\t"]],"start1":1167,"start2":1167,"length1":16,"length2":23}]],"length":10757,"saved":false}
{"ts":1363091056081,"patch":[[{"diffs":[[0,"k.length"],[1,"\t"],[0,";k++){\n\t"]],"start1":1174,"start2":1174,"length1":16,"length2":17}]],"length":10758,"saved":false}
{"ts":1363091218074,"patch":[[{"diffs":[[0,"){\n\t\t\t\t\t"],[1,"//"],[0,"for(var "]],"start1":1147,"start2":1147,"length1":16,"length2":18},{"diffs":[[0,".length\t"],[1,"\t"],[0,";k++){\n\t"]],"start1":1177,"start2":1177,"length1":16,"length2":17},{"diffs":[[0,"\t\t\t\t\t}\n\t\t\t\t\t"],[1,"//"],[0,"}\n\t\t\t\t})\n\t\t\t"]],"start1":1275,"start2":1275,"length1":24,"length2":26}]],"length":10763,"saved":false}
{"contributors":[],"silentsave":false,"ts":1363091343756,"patch":[[{"diffs":[[0,"elem"],[-1,", i, arr"],[0,"){\n\t"]],"start1":1135,"start2":1135,"length1":16,"length2":8}]],"length":10755,"saved":false}
{"ts":1363092451113,"patch":[[{"diffs":[[0,"k.length"],[-1,"\t\t"],[0,";k++){\n\t"]],"start1":1168,"start2":1168,"length1":18,"length2":16}]],"length":10753,"saved":false}
{"ts":1363092658382,"patch":[[{"diffs":[[0,"h;k++){\n"],[1,"\t\t\t\t\tcurrentLevel.forEach(function(s){\n"],[0,"\t\t\t\t\t\tif"]],"start1":1175,"start2":1175,"length1":16,"length2":55},{"diffs":[[0,"_.id == "],[-1,"links[i].source.id"],[1,"s"],[0,"){\n\t\t\t\t\t"]],"start1":1243,"start2":1243,"length1":34,"length2":17},{"diffs":[[0,"\t\t\t\t\t\t}\n"],[1,"\t\t\t\t\t})\n\n"],[0,"\t\t\t\t\t//}"]],"start1":1286,"start2":1286,"length1":16,"length2":25}]],"length":10784,"saved":false}
{"ts":1363092725006,"patch":[[{"diffs":[[0,"d);\n"],[-1,"\t\t\t\t//TODO: az élet is át kéne színezni"],[0,"\n"],[1,""],[0,"\t\t\t\t"]],"start1":1025,"start2":1025,"length1":48,"length2":9},{"diffs":[[0,"m){\n"],[-1,"\t\t\t\t\t//for(var k=0;k<pontok.length;k++){"],[0,"\n"],[1,""],[0,"\t\t\t\t"]],"start1":1099,"start2":1099,"length1":49,"length2":9},{"diffs":[[0,"\t\t}\n"],[1,""],[0,"\t\t\t\t\t})"],[-1,"\n\n\t\t\t\t\t//}"],[0,"\n\t\t\t"]],"start1":1211,"start2":1211,"length1":25,"length2":15}]],"length":10695,"saved":false}
{"ts":1363092765762,"patch":[[{"diffs":[[0,"{\n\t\t\t\t\t\t"],[1,"/*"],[0,"if(elem."]],"start1":1141,"start2":1141,"length1":16,"length2":18},{"diffs":[[0,"\n\t\t\t\t\t\t}"],[1,"/**/"],[0,"\n\t\t\t\t\t})"]],"start1":1208,"start2":1208,"length1":16,"length2":20}]],"length":10701,"saved":false}
{"ts":1363092787727,"patch":[[{"diffs":[[0,"0];\n\t\t\t\t"],[-1,"pontok"],[1,"currentLevel"],[0,".forEach"]],"start1":1064,"start2":1064,"length1":22,"length2":28},{"diffs":[[0,"ion("],[-1,"elem"],[1,"s"],[0,"){\n"],[-1,"\n"],[0,"\t\t\t\t\t"],[-1,"currentLevel"],[1,"pontok"],[0,".for"]],"start1":1098,"start2":1098,"length1":33,"length2":23},{"diffs":[[0,"ch(function("],[-1,"s){"],[1,"elem){\n\n"],[0,"\n\t\t\t\t\t\t/*if("]],"start1":1123,"start2":1123,"length1":27,"length2":32},{"diffs":[[0,"\t\t}/**/\n"],[1,"\n\n"],[0,"\t\t\t\t\t})\n"]],"start1":1214,"start2":1214,"length1":16,"length2":18}]],"length":10704,"saved":false}
{"ts":1363092820913,"patch":[[{"diffs":[[0,"on(s){\n\t\t\t\t\t"],[1,"//"],[0,"pontok.forEa"]],"start1":1099,"start2":1099,"length1":24,"length2":26},{"diffs":[[0,"(elem){\n"],[1,"\t\t\t\t\tpontok[s].style.fill=\"#fff\""],[0,"\n\n\t\t\t\t\t\t"]],"start1":1136,"start2":1136,"length1":16,"length2":48}]],"length":10738,"saved":false}
{"ts":1363092822606,"patch":[[{"diffs":[[0,"l=\"#fff\""],[1,";"],[0,"\n\n\t\t\t\t\t\t"]],"start1":1168,"start2":1168,"length1":16,"length2":17}]],"length":10739,"saved":false}
{"ts":1363092871035,"patch":[[{"diffs":[[0,"/**/\n\n\n\t\t\t\t\t"],[1,"//"],[0,"})\n\t\t\t\t})\n\t\t"]],"start1":1252,"start2":1252,"length1":24,"length2":26}]],"length":10741,"saved":false}
{"ts":1363092913189,"patch":[[{"diffs":[[0,"\"#fff\";\n"],[1,"\t\t\t\t\tconsole.log(\"DEBUG: \" + s);"],[0,"\n\t\t\t\t\t\t/"]],"start1":1170,"start2":1170,"length1":16,"length2":48}]],"length":10773,"saved":false}
{"ts":1363093024762,"patch":[[{"diffs":[[0,"et.id);\n"],[-1,"\n"],[0,"\t"],[1,"\t\t}\n"],[0,"\t\t\tponto"]],"start1":1021,"start2":1021,"length1":18,"length2":21},{"diffs":[[0,"[0];\n\t\t\t"],[-1,"\t"],[0,"currentL"]],"start1":1066,"start2":1066,"length1":17,"length2":16},{"diffs":[[0,"s){\n"],[-1,"\t\t\t\t\t//pontok.forEach(function(elem){\n\t\t"],[1,"\n"],[0,"\t\t\tp"]],"start1":1104,"start2":1104,"length1":48,"length2":9},{"diffs":[[0,"ff\";\n\t\t\t"],[-1,"\t\t"],[0,"console."]],"start1":1136,"start2":1136,"length1":18,"length2":16},{"diffs":[[0,"\n\t\t\t"],[-1,"\t\t\t/*if(elem.__data__.id == s){\n\t\t\t\t\t\t\telem.style.fill='#fff';\n\t\t\t\t\t\t}/**/\n\n\n\t\t\t\t\t//})\n\t\t\t\t})\n\t\t\t"],[0,"}"],[1,")"],[0,"\n\t\t}"]],"start1":1171,"start2":1171,"length1":106,"length2":10}]],"length":10638,"saved":false}
{"ts":1363099507756,"patch":[[{"diffs":[[0,"right'.\n"],[-1,"var "],[0,"nodes = "]],"start1":432,"start2":432,"length1":20,"length2":16},{"diffs":[[0,"e}\n  ],\n"],[-1,"  "],[0,"lastNode"]],"start1":539,"start2":539,"length1":18,"length2":16},{"diffs":[[0,"Id = 2,\n"],[-1,"  "],[0,"links = "]],"start1":555,"start2":555,"length1":18,"length2":16},{"diffs":[[0,"evel){\n\t"],[-1,"var "],[0,"nextLeve"]],"start1":740,"start2":740,"length1":20,"length2":16},{"diffs":[[0,"\n\t}\n"],[-1,"\tif(nextLevel.length > 0)\n\t\trunBFS(nextLevel);"],[0,"\n\n}\n"]],"start1":1169,"start2":1169,"length1":54,"length2":8},{"diffs":[[0,"ter\n  \t\t"],[1,"if(nextLevel.length > 0)\n\t\t\trunBFS(nextLevel);\n\t\telse "],[0,"if(selec"]],"start1":9021,"start2":9021,"length1":16,"length2":70}]],"length":10634,"saved":false}
{"ts":1363099587505,"patch":[[{"diffs":[[0,"ion(s){\n\n\t\t\t"],[1,"\t"],[0,"pontok[s].st"]],"start1":1088,"start2":1088,"length1":24,"length2":25},{"diffs":[[0,"\"#fff\";\n"],[1,"\t"],[0,"\t\t\tconso"]],"start1":1122,"start2":1122,"length1":16,"length2":17},{"diffs":[[0,"\t\t}\n\t}\n\n"],[1,"\tcurrentLevel.forEach(function(s){\n\n\t\tpontok[s].style.fill=\"#fff\";\n\t\tconsole.log(\"DEBUG: \" + s);\n\t})\n"],[0,"\n}\n// in"]],"start1":1168,"start2":1168,"length1":16,"length2":117}]],"length":10737,"saved":false}
{"ts":1363099821342,"patch":[[{"diffs":[[0,"tyle.fill=\"#"],[-1,"fff"],[1,"45f01a"],[0,"\";\n\t\t\t\tconso"]],"start1":1112,"start2":1112,"length1":27,"length2":30},{"diffs":[[0,".fill=\"#"],[-1,"ff"],[1,"8f8f8"],[0,"f\";\n\t\tco"]],"start1":1232,"start2":1232,"length1":18,"length2":21}]],"length":10743,"saved":false}
{"ts":1363099853666,"patch":[[{"diffs":[[0," }\n  ];\n"],[1,"nextLevel = Array();"],[0,"\nfunctio"]],"start1":707,"start2":707,"length1":16,"length2":36},{"diffs":[[0,"l){\n"],[-1,"\tnextLevel = Array();"],[0,"\n\tco"]],"start1":763,"start2":763,"length1":29,"length2":8}]],"length":10742,"saved":false}
{"ts":1363099911587,"patch":[[{"diffs":[[0,"entLevel"],[-1,"){\n"],[1,",lastLevel){\n\tlastLevel.forEach(function(s){\n\n\t\tpontok[s].style.fill=\"#8f8f8f\";\n\t\tconsole.log(\"DEBUG: \" + s);\n\t})"],[0,"\n\tconsol"]],"start1":756,"start2":756,"length1":19,"length2":129},{"diffs":[[0,"\t}\n\n"],[-1,"\tcurrentLevel.forEach(function(s){\n\n\t\tpontok[s].style.fill=\"#8f8f8f\";\n\t\tconsole.log(\"DEBUG: \" + s);\n\t})"],[0,"\n\n}\n"]],"start1":1284,"start2":1284,"length1":111,"length2":8}]],"length":10749,"saved":false}
{"ts":1363099959346,"patch":[[{"diffs":[[0,"rray();\n"],[1,"currentLevel = Array();\n"],[0,"function"]],"start1":728,"start2":728,"length1":16,"length2":40},{"diffs":[[0,"extLevel"],[1,",currentLevel"],[0,");\n\t\tels"]],"start1":9204,"start2":9204,"length1":16,"length2":29},{"diffs":[[0,"node.id]"],[1,",[]"],[0,");\n  \t\t}"]],"start1":9276,"start2":9276,"length1":16,"length2":19}]],"length":10789,"saved":false}
{"ts":1363100006368,"patch":[[{"diffs":[[0,"ion(s){\n"],[-1,"\n"],[0,"\t\tpontok"]],"start1":825,"start2":825,"length1":17,"length2":16}]],"length":10788,"saved":false}
{"ts":1363100025559,"patch":[[{"diffs":[[0,"ole.log("],[1,"\"CURRENT Level: \" + "],[0,"currentL"]],"start1":906,"start2":906,"length1":16,"length2":36}]],"length":10808,"saved":false}
{"ts":1363100044092,"patch":[[{"diffs":[[0,"s);\n\t})\n"],[1,"\tconsole.log(\"LAST Level: \" + lastLevel.toString());\n"],[0,"\tconsole"]],"start1":893,"start2":893,"length1":16,"length2":69}]],"length":10861,"saved":false}
{"ts":1363100066058,"patch":[[{"diffs":[[0,"a\";\n\t\t\t\t"],[1,"//"],[0,"console."]],"start1":1334,"start2":1334,"length1":16,"length2":18}]],"length":10863,"saved":false}
{"ts":1363100143977,"patch":[[{"diffs":[[0,"Level){\n"],[1,"\tnextLevel = Array();\n"],[0,"\tlastLev"]],"start1":793,"start2":793,"length1":16,"length2":38}]],"length":10885,"saved":false}
{"ts":1363100542669,"patch":[[{"diffs":[[0,"();\n"],[-1,"currentLevel = Array();"],[0,"\nfun"]],"start1":732,"start2":732,"length1":31,"length2":8}]],"length":10862,"saved":false}
{"ts":1363100641370,"patch":[[{"diffs":[[0," }\n  ];\n"],[-1,"nextLevel = Array();"],[0,"\n\nfuncti"]],"start1":707,"start2":707,"length1":36,"length2":16}]],"length":10842,"saved":false}
{"ts":1363100698429,"patch":[[{"diffs":[[0,"\n  \t\tif("],[1,"typeof nextLevel!==undefined && "],[0,"nextLeve"]],"start1":9216,"start2":9216,"length1":16,"length2":48}]],"length":10874,"saved":false}
{"ts":1363100732443,"patch":[[{"diffs":[[0,"Level!=="],[1,"\""],[0,"undefine"]],"start1":9235,"start2":9235,"length1":16,"length2":17},{"diffs":[[0,"ndefined"],[1,"\""],[0," && next"]],"start1":9245,"start2":9245,"length1":16,"length2":17}]],"length":10876,"saved":false}
{"ts":1363100886063,"patch":[[{"diffs":[[0,"efined\" "],[-1,"&& "],[1,")\n  \t\t\tif("],[0,"nextLeve"]],"start1":9247,"start2":9247,"length1":19,"length2":26}]],"length":10883,"saved":false}
{"ts":1363100888946,"patch":[[{"diffs":[[0,"> 0)\n\t\t\t"],[1,"\t"],[0,"runBFS(n"]],"start1":9282,"start2":9282,"length1":16,"length2":17}]],"length":10884,"saved":false}
{"ts":1363100988419,"patch":[[{"diffs":[[0,"/ Enter\n"],[1,"  \t\tconsole.log(typeof nextLevel);\n"],[0,"  \t\tif(t"]],"start1":9209,"start2":9209,"length1":16,"length2":51}]],"length":10919,"saved":false}
{"ts":1363101010458,"patch":[[{"diffs":[[0,"extLevel"],[-1,"!"],[1,"="],[0,"==\"undef"]],"start1":9267,"start2":9267,"length1":17,"length2":17}]],"length":10919,"saved":false}
{"ts":1363101038877,"patch":[[{"diffs":[[0,"extLevel"],[-1,"=="],[1,"!"],[0,"=\"undefi"]],"start1":9267,"start2":9267,"length1":18,"length2":17}]],"length":10918,"saved":false}
{"ts":1363101096695,"patch":[[{"diffs":[[0,"extLevel"],[-1,"!"],[1,"="],[0,"=\"undefi"]],"start1":9267,"start2":9267,"length1":17,"length2":17},{"diffs":[[0,"ined\" )\n"],[1,"  \t\t\tif(selected_node){\n  \t\t\t\trunBFS([selected_node.id],[]);\n"],[0,"  \t\t\tif("]],"start1":9283,"start2":9283,"length1":16,"length2":77},{"diffs":[[0,"l);\n"],[1,""],[0,"\t\telse"],[-1," if(selected_node){\n  \t\t\trunBFS([selected_node.id],[]);"],[0,"\n  \t"]],"start1":9414,"start2":9414,"length1":69,"length2":14}]],"length":10924,"saved":false}
{"ts":1363101110453,"patch":[[{"diffs":[[0,"d],[]);\n"],[-1,"  "],[1,"\t\telse\n"],[0,"\t\t\tif(ne"]],"start1":9344,"start2":9344,"length1":18,"length2":23},{"diffs":[[0,"Level);\n"],[-1,"\t\telse\n"],[0,"  \t\t}\n  "]],"start1":9415,"start2":9415,"length1":23,"length2":16}]],"length":10922,"saved":false}
{"ts":1363101187919,"patch":[[{"diffs":[[0,"fined\" )"],[1,"{"],[0,"\n  \t\t\tif"]],"start1":9282,"start2":9282,"length1":16,"length2":17},{"diffs":[[0,"]);\n"],[1,"  \t\t\t}\n"],[0,"\t\telse\n"],[1,"\t\t{\n"],[0,"\t\t\ti"]],"start1":9349,"start2":9349,"length1":15,"length2":26}]],"length":10934,"saved":false}
{"ts":1363101235192,"patch":[[{"diffs":[[0,"\n  \t\t\t}\n"],[1,"  \t\t}\n"],[0,"\t\telse\n\t"]],"start1":9352,"start2":9352,"length1":16,"length2":22}]],"length":10940,"saved":false}
{"ts":1363101242204,"patch":[[{"diffs":[[0,"gth > 0)"],[1,"{"],[0,"\n\t\t\t\trun"]],"start1":9396,"start2":9396,"length1":16,"length2":17},{"diffs":[[0,"rentLevel);\n"],[1,"\t\t\t}\n"],[0,"  \t\t}\n  \t\tbr"]],"start1":9430,"start2":9430,"length1":24,"length2":29}]],"length":10946,"saved":false}
{"ts":1363101292001,"patch":[[{"diffs":[[0," }\n  ];\n"],[1,"currentLevel = Array();"],[0,"\n\nfuncti"]],"start1":707,"start2":707,"length1":16,"length2":39}]],"length":10969,"saved":false}
{"ts":1363101297049,"patch":[[{"diffs":[[0,"ray();\n\n"],[1,"\n"],[0,"function"]],"start1":732,"start2":732,"length1":16,"length2":17}]],"length":10970,"saved":false}
{"ts":1363101298760,"patch":[[{"diffs":[[0,"ray();\n\n"],[-1,"\n"],[0,"function"]],"start1":732,"start2":732,"length1":17,"length2":16}]],"length":10969,"saved":false}
{"ts":1363101426706,"patch":[[{"diffs":[[0,"h > 0){\n"],[1,"\t\t\t\tconsole.log(nextLevel)\n\t\t\t}\n"],[0,"\t\t\t\trunB"]],"start1":9421,"start2":9421,"length1":16,"length2":48}]],"length":11001,"saved":false}
{"ts":1363101430595,"patch":[[{"diffs":[[0,"xtLevel)"],[1,";"],[0,"\n"],[-1,"\t\t\t}"],[0,"\n\t\t\t\trun"]],"start1":9447,"start2":9447,"length1":21,"length2":18}]],"length":10998,"saved":false}
{"ts":1363101496817,"patch":[[{"diffs":[[0,"l){\n"],[-1,"\tnextLevel = Array();"],[0,"\n\tla"]],"start1":777,"start2":777,"length1":29,"length2":8},{"diffs":[[0,"pontok;\n"],[1,"\tnextLevel=Array();\n"],[0,"\tfor(i ="]],"start1":1038,"start2":1038,"length1":16,"length2":36}]],"length":10997,"saved":false}
{"ts":1363101548431,"patch":[[{"diffs":[[0,"extLevel"],[1,", currentLevel"],[0,");\n"],[-1,"\n"],[0,"\t\t\t\trunB"]],"start1":9445,"start2":9445,"length1":20,"length2":33}]],"length":11010,"saved":false}
{"ts":1363101606544,"patch":[[{"diffs":[[0," ];\n"],[-1,"currentLevel = Array();"],[0,"\n\nfu"]],"start1":711,"start2":711,"length1":31,"length2":8}]],"length":10987,"saved":false}
{"ts":1363101738688,"patch":[[{"diffs":[[0,"}\n  ];\n\n"],[1,"currentLevel = Array();\n"],[0,"\nfunctio"]],"start1":708,"start2":708,"length1":16,"length2":40}]],"length":11011,"saved":false}
{"ts":1363101798400,"patch":[[{"diffs":[[0,"}\n  ];\n\n"],[-1,"current"],[1,"l"],[0,"Level = "]],"start1":708,"start2":708,"length1":23,"length2":17}]],"length":11005,"saved":false}
{"ts":1363101809822,"patch":[[{"diffs":[[0,"\n\t\t}\n\t}\n"],[1,"\tlLevel = currentLevel;"],[0,"\n\n\n}\n// "]],"start1":1373,"start2":1373,"length1":16,"length2":39}]],"length":11028,"saved":false}
{"ts":1363101875910,"patch":[[{"diffs":[[0,"xtLevel,"],[-1,"current"],[1,"l"],[0,"Level);\n"]],"start1":9501,"start2":9501,"length1":23,"length2":17}]],"length":11022,"saved":false}
{"ts":1363102003982,"patch":[[{"diffs":[[0,"tLevel, "],[-1,"currentL"],[1,"lLv"],[0,"evel);\n\t"]],"start1":9465,"start2":9465,"length1":24,"length2":19}]],"length":11017,"saved":false}
{"ts":1363102028847,"patch":[[{"diffs":[[0,"evel, lL"],[-1,"v"],[0,"evel);\n\t"]],"start1":9467,"start2":9467,"length1":17,"length2":16}]],"length":11016,"saved":false}
{"ts":1363102117694,"patch":[[{"diffs":[[0,"Level){\n"],[1,"\tvar lpontok;\n\tlpontok=d3.selectAll('circle')[0];"],[0,"\n\tlastLe"]],"start1":768,"start2":768,"length1":16,"length2":65},{"diffs":[[0,"n(s){\n\t\t"],[1,"l"],[0,"pontok[s"]],"start1":852,"start2":852,"length1":16,"length2":17}]],"length":11066,"saved":false}
